/**
 * 
 */
package main.java.com.malwarebytes.fibonacci;

import java.io.PrintWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;

/**
 * @author Malwarebytes Site Reliability Engineering Team 
 *
 */
public class Fibonacci 
{
	/**
	 * This function calculates and prints in reverse order the Fibonacci sequence 
	 * starting the position passed as input
	 * @param lastSeqElemPosition position of the last Fibonacci sequence number should be printed out
	 * @param writer - This interface manages the flebility/scalability to use different outputs (scopes: e.g. websersices, files...)  
	 * @throws IllegalArgumentException if the input parameters are null or if the lastSeqElemPosition is <=0
	 */
	public void printSequenceInReverseOrder(BigInteger lastSeqElemPosition, PrintWriter writer, String delimiter) 
						throws IllegalArgumentException
	{
		 if ((writer == null) || 
		     (lastSeqElemPosition == null) || 
		     (lastSeqElemPosition.compareTo(BigInteger.ZERO) <= 0) ||
		     (delimiter == null))
		 {
             throw new IllegalArgumentException();
         } 
		 final int DIVISION_SCALE = 0;
		 final BigDecimal GOLDEN_RATIO = BigDecimal.valueOf((1 + Math.sqrt(5)) / 2);
		 BigDecimal currentSeqElem = computingLastSeqElement(GOLDEN_RATIO, lastSeqElemPosition.subtract(BigInteger.ONE));
		 BigInteger seqElementsCounter = lastSeqElemPosition.subtract(BigInteger.TWO);
		 for ( ; seqElementsCounter.compareTo(BigInteger.ZERO) >= 0; 
			 seqElementsCounter = seqElementsCounter.subtract(BigInteger.ONE))
		 {
		    writer.write(currentSeqElem.toBigInteger().toString());
		    writer.write(delimiter);
		    currentSeqElem = currentSeqElem.divide(GOLDEN_RATIO, DIVISION_SCALE, RoundingMode.HALF_DOWN);
		 } 
		 writer.write(BigInteger.ZERO.toString());
	}

	/**
	 * This method checks if the input number is part of the Fibonacci sequence
	 * @param number
	 * @return true if n is a Fibonacci Number, else false
	 * @throws IllegalArgumentException if number is null or negative
	 */
	public boolean isPartOfSequence(BigInteger number) throws IllegalArgumentException
	{
		if ((number == null) || (number.compareTo(BigInteger.ZERO) < 0))
		{
            throw new IllegalArgumentException();
        } 
	    final BigInteger FIVE = BigInteger.valueOf(5);
	    final BigInteger FOUR = BigInteger.valueOf(4);
   	 	// n is Fibonacci if one of 5*n*n + 4 or 5*n*n - 4 or both 
   	    // is a perfect square
   	    return isPerfectSquare(FIVE.multiply(number).multiply(number).add(FOUR)) || 
   	    	   isPerfectSquare(FIVE.multiply(number).multiply(number).subtract(FOUR));
	}
	
	/**
	 *  A utility method that returns true if x is perfect square 
	 * @param x
	 * @return
	 */
    private boolean isPerfectSquare(BigInteger x) 
    { 
    	BigInteger b = x.sqrt();
        return (b.multiply(b).compareTo(x) == 0); 
    } 
    
    private BigDecimal computingLastSeqElement(BigDecimal goldenRatio, BigInteger lastSeqElemPosition) 
    {
    	final int DIVISION_SCALE = 0;
    	BigDecimal result = BigDecimal.ONE;
    	if (lastSeqElemPosition.compareTo(BigInteger.ZERO) == 0) return result;
        final BigDecimal FACTOR = BigDecimal.valueOf(Math.sqrt(5));
    	for ( BigInteger nTimes = BigInteger.ONE; nTimes.compareTo(lastSeqElemPosition) <= 0; 
  	      nTimes = nTimes.add(BigInteger.ONE))
  	{
    	    result = result.multiply(goldenRatio);
  	}
    	return result.divide(FACTOR, DIVISION_SCALE, RoundingMode.HALF_DOWN);
    }
}
