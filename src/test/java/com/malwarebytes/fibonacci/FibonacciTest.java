package test.java.com.malwarebytes.fibonacci;

import static org.junit.Assert.assertEquals;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.math.BigInteger;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import main.java.com.malwarebytes.fibonacci.Fibonacci;

class FibonacciTest {

	static Fibonacci seq      = null;
	static PrintWriter writer = null;
	static StringWriter out   = null;
	static BigInteger nElems  = null;
	static long totalTime = 0L;
	static long preTime = 0L;
	static long postTime = 0L;
	static final String DELIMITER = ",";
	
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
	  seq = new Fibonacci();
	  out = new StringWriter();
	  writer = new PrintWriter(out);
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
		System.out.println("Total time execution (ms) -> " + totalTime);
		writer.flush();  
	    writer.close();
	}
    
	@BeforeEach
	void setUp() throws Exception {
	  preTime=System.currentTimeMillis();
	}

	@AfterEach
	void tearDown() throws Exception {
	  postTime=System.currentTimeMillis();
	  long timeElapsedSingleTest = postTime - preTime;
	  totalTime += timeElapsedSingleTest;
	}

	/**
     * Tests that Fibonacci throws an IllegalArgumentException
     * for a non-positive input number of elements in the sequence to print out.
     */
    @Test
    public void test_printSequenceInReverseOrder_expectedIllegalArgumentException_nonPositiveInput() {
    	nElems = BigInteger.valueOf(-1); 
    	Assertions.assertThrows(IllegalArgumentException.class, () -> {
    		seq.printSequenceInReverseOrder(nElems, writer, DELIMITER);
    	    });
    	nElems = BigInteger.valueOf(0); 
    	Assertions.assertThrows(IllegalArgumentException.class, () -> {
    		seq.printSequenceInReverseOrder(nElems, writer, DELIMITER);
    	});
    	Assertions.assertThrows(IllegalArgumentException.class, () -> {
    		seq.printSequenceInReverseOrder(null, writer, DELIMITER);
    	});
    	Assertions.assertThrows(IllegalArgumentException.class, () -> {
    		seq.printSequenceInReverseOrder(nElems, null, DELIMITER);
    	});
    	Assertions.assertThrows(IllegalArgumentException.class, () -> {
    		seq.printSequenceInReverseOrder(nElems, writer, null);
    	});
    }

    /** Tests inductive cases of the Fibonacci sequence */
    @Test
    public void test_printSequenceInReverseOrder_inductiveCase() {
        String[][] cases = new String[][] {
                { "1", "0" },
                { "2", "1,0" },
                { "3", "1,1,0" },
                { "4", "2,1,1,0" },
                { "5", "3,2,1,1,0" },
                { "6", "5,3,2,1,1,0" },
                { "7", "8,5,3,2,1,1,0" },
                { "8", "13,8,5,3,2,1,1,0" },
                { "9", "21,13,8,5,3,2,1,1,0" },
                { "10", "34,21,13,8,5,3,2,1,1,0" }
            };
        for (int i = 0; i < cases.length; i++) 
        {
        	nElems = new BigInteger(cases[i][0]);
        	seq.printSequenceInReverseOrder(nElems, writer, DELIMITER);
            assertEquals("Number of elements to print out(" + cases[i][0] + ")",
                         cases[i][1], out.toString());
            out = new StringWriter();
      	    writer = new PrintWriter(out);
        }
    }
    
	@Test
	void test_isPartOfSequence_expectedIllegalArgumentException_negativeInput() {
    	Assertions.assertThrows(IllegalArgumentException.class, () -> {
    		seq.isPartOfSequence(BigInteger.valueOf(-1));
    	    });
    	Assertions.assertThrows(IllegalArgumentException.class, () -> {
    		seq.isPartOfSequence(null);
    	    });
	}
	
	@Test
	void test_isPartOfSequence_inductiveCase() {
		String[][] cases = new String[][] {
            { "1", "true" },
            { "2", "true" },
            { "6", "false" },
            { "144", "true" },
            { "145", "false" }
        };
        for (int i = 0; i < cases.length; i++) 
        {
        	String actualResult = String.valueOf(seq.isPartOfSequence(new BigInteger(cases[i][0])));
        	assertEquals("is the element (" + cases[i][0] + ") part of the sequence?" ,
                     cases[i][1], actualResult);
        }
	}
}

// Fibonacci Seq Example   0,  1,  1,  2,  3,  5,  8,  13,  21,  34,  55,  89,  144
// Fibonacci Elem Position 1   2   3   4   5   6   7    8    9   10   11   12   13
